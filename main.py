import os
import json
import random
import asyncio
from pathlib import Path
from hashlib import sha1
from typing import Optional

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.types.input_file import BufferedInputFile

# =========================
# –ù–ê–°–¢–†–û–ô–ö–ò
# =========================
BOT_TOKEN = os.getenv("BOT_TOKEN")  # ‚Üê –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è Render
if not BOT_TOKEN:
    print("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (Render ‚Üí Environment).")

BASE_DIR = Path(__file__).parent.resolve()

QUOTES_DIR = BASE_DIR / "quotes"
IMAGES_DIR = BASE_DIR / "images"
STATE_FILE = BASE_DIR / "state.json"

# —Å–æ–∑–¥–∞–¥–∏–º –ø–∞–ø–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –≤–¥—Ä—É–≥ –Ω–µ –∑–∞–ª–∏—Ç—ã
for p in (QUOTES_DIR, IMAGES_DIR):
    try:
        p.mkdir(parents=True, exist_ok=True)
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å {p}: {e}")

RECENT_N = 20  # –≥–ª—É–±–∏–Ω–∞ –∞–Ω—Ç–∏-–ø–æ–≤—Ç–æ—Ä–∞
IMG_EXTS = {".jpg", ".jpeg", ".png"}

bot = Bot(token=BOT_TOKEN) if BOT_TOKEN else None
dp = Dispatcher()

# =========================
# –ê–ù–¢–ò-–ü–û–í–¢–û–† (—Å–æ—Å—Ç–æ—è–Ω–∏–µ)
# =========================
def _load_state() -> dict:
    if STATE_FILE.exists():
        try:
            return json.loads(STATE_FILE.read_text(encoding="utf-8"))
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è state.json: {e}")
    return {}

def _save_state(st: dict):
    try:
        STATE_FILE.write_text(json.dumps(st, ensure_ascii=False, indent=2), encoding="utf-8")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ state.json: {e}")

def _hash_text(s: str) -> str:
    return sha1(s.encode("utf-8")).hexdigest()[:16]

def _user_bucket(st: dict, user_id: int, cat_key: str) -> list:
    u = st.setdefault(str(user_id), {})
    return u.setdefault(cat_key, [])

def _remember(st: dict, user_id: int, cat_key: str, key: str):
    u = st.setdefault(str(user_id), {})
    bucket = u.setdefault(cat_key, [])
    bucket.append(key)
    if len(bucket) > RECENT_N:
        del bucket[: len(bucket) - RECENT_N]

def pick_non_repeating(user_id: int, cat_key: str, items: list[str]) -> str:
    items = items or ["(–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)"]
    st = _load_state()
    seen = set(_user_bucket(st, user_id, cat_key))
    candidates = [x for x in items if _hash_text(x) not in seen]
    if not candidates:
        st.setdefault(str(user_id), {})[cat_key] = []
        _save_state(st)
        candidates = items[:]
    choice = random.choice(candidates)
    _remember(st, user_id, cat_key, _hash_text(choice))
    _save_state(st)
    return choice

def pick_image_non_repeating(user_id: int, cat_key: str, folder: Path) -> Optional[BufferedInputFile]:
    try:
        imgs = [p for p in folder.iterdir() if p.is_file() and p.suffix.lower() in IMG_EXTS]
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø–∞–ø–∫—É {folder}: {e}")
        imgs = []
    if not imgs:
        return None
    st = _load_state()
    last_key = f"{cat_key}__last_image"
    last = st.get(str(user_id), {}).get(last_key)
    choices = [p for p in imgs if p.name != last] or imgs
    img = random.choice(choices)
    u = st.setdefault(str(user_id), {})
    u[last_key] = img.name
    _save_state(st)
    try:
        return BufferedInputFile(img.read_bytes(), filename=img.name)
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {img}: {e}")
        return None

# =========================
# –ó–ê–ì–†–£–ó–ö–ê –¶–ò–¢–ê–¢
# =========================
def load_quotes(file_path: Path) -> list[str]:
    try:
        if not file_path.exists():
            print(f"‚ö†Ô∏è –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return ["(–Ω–µ—Ç —Ü–∏—Ç–∞—Ç)"]
        lines = [line.strip() for line in file_path.read_text(encoding="utf-8").splitlines() if line.strip()]
        return lines or ["(—Ñ–∞–π–ª –ø—É—Å—Ç)"]
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {file_path}: {e}")
        return ["(–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞)"]

# =========================
# –ö–õ–ê–í–ò–ê–¢–£–†–ê
# =========================
keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üé¨ Movies"), KeyboardButton(text="üéµ Songs")],
        [KeyboardButton(text="‚ú® Affirmations"), KeyboardButton(text="üé≤ Random")]
    ],
    resize_keyboard=True
)

# =========================
# /start
# =========================
@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üí´ –Ø —Ç–≤–æ–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ä–∞–∫—É–ª.\n–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=keyboard
    )

# =========================
# MOVIES
# =========================
@dp.message(F.text == "üé¨ Movies")
async def movies_category(message: types.Message):
    sub_kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="Supernatural"), KeyboardButton(text="Friends")],
            [KeyboardButton(text="Rebelde Way")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é üé•", reply_markup=sub_kb)

@dp.message(F.text.in_({"Supernatural", "Friends", "Rebelde Way"}))
async def movie_sub(message: types.Message):
    tag = message.text.lower().replace(" ", "_")
    quotes_file = QUOTES_DIR / "movies.txt"
    all_lines = load_quotes(quotes_file)
    lines = [l.split("]", 1)[1].strip() for l in all_lines if l.startswith(f"[{tag}]")]
    quote = pick_non_repeating(message.from_user.id, f"movies:{tag}", lines)
    folder = IMAGES_DIR_
